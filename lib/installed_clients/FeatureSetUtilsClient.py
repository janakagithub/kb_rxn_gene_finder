# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class FeatureSetUtils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='beta',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def upload_featureset_from_diff_expr(self, params, context=None):
        """
        upload_featureset_from_diff_expr: create a FeatureSet object from a RNASeqDifferentialExpression object
        :param params: instance of type "UploadFeatureSetFromDiffExprInput"
           (required params: diff_expression_ref:
           DifferetialExpressionMatrixSet object reference
           expression_matrix_ref: ExpressionMatrix object reference p_cutoff:
           p value cutoff q_cutoff: q value cutoff fold_scale_type: one of
           ["linear", "log2+1", "log10+1"]  DEPRICATED NOW
           fold_change_cutoff: fold change cutoff feature_set_suffix: Result
           FeatureSet object name suffix filtered_expression_matrix_suffix:
           Result ExpressionMatrix object name suffix workspace_name: the
           name of the workspace it gets saved to run_all_combinations: run
           all paired condition combinations (default true) or
           condition_labels: conditions for expression set object) ->
           structure: parameter "diff_expression_ref" of type "obj_ref" (An
           X/Y/Z style reference @id ws), parameter "expression_matrix_ref"
           of type "obj_ref" (An X/Y/Z style reference @id ws), parameter
           "p_cutoff" of Double, parameter "q_cutoff" of Double, parameter
           "fold_scale_type" of String, parameter "fold_change_cutoff" of
           Double, parameter "feature_set_suffix" of String, parameter
           "filtered_expression_matrix_suffix" of String, parameter
           "workspace_name" of String, parameter "run_all_combinations" of
           type "boolean" (A boolean - 0 for false, 1 for true. @range (0,
           1)), parameter "condition_labels" of list of String
        :returns: instance of type "UploadFeatureSetFromDiffExprResult"
           (result_directory: folder path that holds all files generated by
           upload_featureset_from_diff_expr up_feature_set_ref_list: list of
           generated upper FeatureSet object reference
           down_feature_set_ref_list: list of generated down FeatureSet
           object reference filtered_expression_matrix_ref_list: list of
           generated filtered ExpressionMatrix object reference report_name:
           report name generated by KBaseReport report_ref: report reference
           generated by KBaseReport) -> structure: parameter
           "result_directory" of String, parameter "up_feature_set_ref_list"
           of list of type "obj_ref" (An X/Y/Z style reference @id ws),
           parameter "down_feature_set_ref_list" of list of type "obj_ref"
           (An X/Y/Z style reference @id ws), parameter
           "filtered_expression_matrix_ref_list" of list of type "obj_ref"
           (An X/Y/Z style reference @id ws), parameter "report_name" of
           String, parameter "report_ref" of String
        """
        return self._client.run_job('FeatureSetUtils.upload_featureset_from_diff_expr',
                                    [params], self._service_ver, context)

    def calculate_average_expression_matrix(self, params, context=None):
        """
        calculate_average_expression_matrix: create an average ExpressionMatrix object from a ExpressionMatrix object
        :param params: instance of type "CalAveExpressionMatrixInput"
           (required params: expression_matrix_ref: ExpressionMatrix object
           reference output_suffix: output average ExpressionMatrix name
           suffix workspace_name: the name of the workspace it gets saved to)
           -> structure: parameter "expression_matrix_ref" of type "obj_ref"
           (An X/Y/Z style reference @id ws), parameter "output_suffix" of
           String, parameter "workspace_name" of String
        :returns: instance of type "CalAveExpressionMatrixResult"
           (average_expression_matrix_ref: generated average ExpressionMatrix
           object reference report_name: report name generated by KBaseReport
           report_ref: report reference generated by KBaseReport) ->
           structure: parameter "average_expression_matrix_ref" of type
           "obj_ref" (An X/Y/Z style reference @id ws), parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.run_job('FeatureSetUtils.calculate_average_expression_matrix',
                                    [params], self._service_ver, context)

    def filter_expression_matrix_with_feature_set(self, params, context=None):
        """
        :param params: instance of type
           "FilterExpressionMatrixWithFeatureSetParams" (required params:
           expression_matrix_ref: ExpressionMatrix object reference
           output_suffix: output average ExpressionMatrix name suffix
           workspace_name: the name of the workspace it gets saved to) ->
           structure: parameter "feature_set_ref" of type "obj_ref" (An X/Y/Z
           style reference @id ws), parameter "expression_matrix_ref" of type
           "obj_ref" (An X/Y/Z style reference @id ws), parameter
           "filtered_expression_matrix_suffix" of String, parameter
           "workspace_name" of String
        :returns: instance of type
           "FilterExpressionMatrixWithFeatureSetResult"
           (average_expression_matrix_ref: generated average ExpressionMatrix
           object reference report_name: report name generated by KBaseReport
           report_ref: report reference generated by KBaseReport) ->
           structure: parameter "filtered_expression_matrix_ref" of type
           "obj_ref" (An X/Y/Z style reference @id ws), parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.run_job('FeatureSetUtils.filter_expression_matrix_with_feature_set',
                                    [params], self._service_ver, context)

    def build_feature_set(self, params, context=None):
        """
        :param params: instance of type "BuildFeatureSetParams"
           (base_feature_sets - optional description - optional) ->
           structure: parameter "genome" of type "obj_ref" (An X/Y/Z style
           reference @id ws), parameter "feature_ids" of list of String,
           parameter "feature_ids_custom" of String, parameter
           "base_feature_sets" of list of type "obj_ref" (An X/Y/Z style
           reference @id ws), parameter "description" of String, parameter
           "workspace_name" of String, parameter "output_feature_set" of
           String
        :returns: instance of type "BuildFeatureSetResult" -> structure:
           parameter "feature_set_ref" of type "obj_ref" (An X/Y/Z style
           reference @id ws), parameter "report_name" of String, parameter
           "report_ref" of String
        """
        return self._client.run_job('FeatureSetUtils.build_feature_set',
                                    [params], self._service_ver, context)

    def featureset_to_tsv_file(self, params, context=None):
        """
        :param params: instance of type "FeatureSetToFileParams" ->
           structure: parameter "featureset_name" of String, parameter
           "workspace_name" of String
        :returns: instance of type "FeatureSetTsvFiles" -> structure:
           parameter "file_path" of String
        """
        return self._client.run_job('FeatureSetUtils.featureset_to_tsv_file',
                                    [params], self._service_ver, context)

    def export_featureset_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        return self._client.run_job('FeatureSetUtils.export_featureset_as_tsv_file',
                                    [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('FeatureSetUtils.status',
                                    [], self._service_ver, context)
