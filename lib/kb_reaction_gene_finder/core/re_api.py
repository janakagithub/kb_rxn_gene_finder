import requests

#
#  This is fapi - the fake api which is an attempt to isolate the layer of calls that
#  are anticipated to handled by the graphDB.   If this works, it should be possible to
#  rewrite these functions/procedures to use Arango and run the main app basis program
#  without alteration
#


class RE_API:
    def __init__(self, re_url, token):
        self.re_url = re_url
        self.token = token

    def _call_re(self, endpoint="/api/query_results/", params=None, data=None):
        header = {"Authorization": self.token}
        ret = requests.post(self.re_url+endpoint, data, params=params, header=header)
        ret.raise_for_status()
        return ret.json()


    def get_similar_reactions(self, reaction_id, other_params):
        return NotImplementedError


    # this simulates a graphDB call by reading the normal table file
    # modelseed_rxn_genome_gene.tab, generated by make_normal_modelseed_table.py
    # from the ModelSEED model tsv files.
    #
    # currently this works only for one reaction.   Maybe it should be
    # modified to work on a list instead
    #
    def get_modelseed_genomes_genes(self, target_rxn):
        return NotImplementedError


    # this returns a big fasta-format as a string, suitable for printing
    #  If genes (list of gene ids) is given, only those genes are returned.
    # If not given, all are returned

    def get_protein_sequences(self, genome, genes=None):
        return NotImplementedError

